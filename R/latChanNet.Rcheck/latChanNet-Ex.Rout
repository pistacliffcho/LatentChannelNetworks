
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "latChanNet"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('latChanNet')
Warning: replacing previous import ‘Rcpp::prompt’ by ‘utils::prompt’ when loading ‘latChanNet’
Warning: replacing previous import ‘Rcpp::.DollarNames’ by ‘utils::.DollarNames’ when loading ‘latChanNet’
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("latChanNet-package")
> ### * latChanNet-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latChanNet-package
> ### Title: Latent Network Models for edge and metadata prediction.
> ### Aliases: latChanNet-package latChanNet
> ### Keywords: network
> 
> ### ** Examples
> 
>   ## Not run: 
> ##D      ## Optional simple examples of the most important functions
> ##D      ## These can be in \dontrun{} and \donttest{} blocks.   
> ##D   
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("makeLatentModel")
> ### * makeLatentModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeLatentModel
> ### Title: Make Latent Structure model
> ### Aliases: makeLatentModel
> 
> ### ** Examples
> 
> data(email_data)
> # Building model with metadata
> model = makeLatentModel(email_data$edgeList, 
+                         10, 
+                         metadata = email_data$meta)
> # Fitting model
> model$fit()
$err
[1] 9.98748e-05

$its
[1] 2962

> 
> # Predicting two edge probabilities
> predict(model, i = c(2,3), j = c(4,5))
Nodes 2:4 Nodes 3:5 
0.0000000 0.6023617 
> 
> 
> 
> 
> cleanEx()
> nameEx("predict.LatClass")
> ### * predict.LatClass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.LatClass
> ### Title: Predictions from LatClass objects
> ### Aliases: predict.LatClass
> 
> ### ** Examples
> 
> data(email_data)
> 
> # Building model and fitting
> mod = makeLatentModel(email_data$edgeList, 
+                       nChans = 10, 
+                       metadata = email_data$meta)
> mod$fit(fast_em = TRUE)
$err
[1] 9.989864e-05

$its
[1] 325

> 
> # Predicting edge pairs
> predict(mod, i = 1:3, j = 4:2)
 Nodes 1:4  Nodes 2:3  Nodes 3:2 
0.02574049 0.00000000 0.00000000 
> 
> # Predicting all combinations of i and j
> predict(mod, i = 1:3, j = 1:3, type = "cross")
           Node 1    Node 2     Node 3
Node 1 0.23006693 0.2588793 0.03260344
Node 2 0.25887929 0.3112189 0.00000000
Node 3 0.03260344 0.0000000 0.61233615
> 
> # Predicting metadata 
> # Subsetting for brevity
> predict(mod, i = 1:3, "dpt")[,1:5]
             dpt1      dpt2 dpt3       dpt4        dpt5
Node 1 0.02434453 0.2867997    0 0.08312848 0.007731609
Node 2 0.04646244 0.3205362    0 0.10037401 0.071395780
Node 3 0.00000000 0.0000000    0 0.00000000 0.000000000
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  9.12 0.156 2.945 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
