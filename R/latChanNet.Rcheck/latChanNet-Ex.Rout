
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "latChanNet"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('latChanNet')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("chan_connect")
> ### * chan_connect
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chan_connect
> ### Title: Estimate Channels Nodes Connect Through
> ### Aliases: chan_connect
> 
> ### ** Examples
> 
> data("email_data")
> mod = makeLatentModel(email_data$edgeList, 10, 
+                       meta = email_data$meta)
> mod$fit(fast_em = TRUE)
$err
[1] 9.989864e-05

$its
[1] 325

> 
> # Checking channel usage for 
> # first few edges
> nodes_1 = email_data$edgeList[1:5, 1]
> nodes_2 = email_data$edgeList[1:5, 2]
> chan_connect(nodes_1, nodes_2, mod)
          Channel 1  Channel 2  Channel 3  Channel 4  Channel 5   Channel 6
Edge 1:2 0.00000000 0.01475156 0.00000000 0.92389564 0.08560440 0.000000000
Edge 3:4 0.00000000 0.00000000 0.01997595 0.00000000 0.00000000 0.000000000
Edge 3:5 0.00000000 0.00000000 0.02712647 0.00000000 0.00000000 0.000000000
Edge 6:7 0.06590952 0.13924701 0.00000000 0.00668636 0.05748415 0.009537207
Edge 6:8 0.00000000 0.00000000 0.03954256 0.10221120 0.00000000 0.878717046
         Channel 7 Channel 8  Channel 9 Channel 10
Edge 1:2 0.0000000 0.0000000 0.00000000 0.00000000
Edge 3:4 0.0000000 0.9901210 0.00000000 0.00000000
Edge 3:5 0.0000000 0.9887323 0.00000000 0.00000000
Edge 6:7 0.1514878 0.6990809 0.05808436 0.04944517
Edge 6:8 0.0000000 0.0000000 0.00000000 0.00000000
> 
> # Checking channel usage for all edges 
> # for first two nodes
> chan_connect(i = c(1000, 1001), model = mod)
              Channel 1  Channel 2 Channel 3 Channel 4 Channel 5 Channel 6
Edge 1000:146         0 0.00000000         1         0         0         0
Edge 1001:293         0 0.09928134         0         0         0         0
Edge 1001:233         0 0.39024494         0         0         0         0
Edge 1001:919         0 1.00000000         0         0         0         0
Edge 1001:167         0 0.40137767         0         0         0         0
Edge 1001:15          0 0.36395063         0         0         0         0
Edge 1001:207         0 0.67212348         0         0         0         0
              Channel 7 Channel 8 Channel 9 Channel 10
Edge 1000:146 0.0000000         0         0          0
Edge 1001:293 0.9048236         0         0          0
Edge 1001:233 0.6268321         0         0          0
Edge 1001:919 0.0000000         0         0          0
Edge 1001:167 0.6071595         0         0          0
Edge 1001:15  0.6531306         0         0          0
Edge 1001:207 0.3413799         0         0          0
> 
> 
> 
> cleanEx()
> nameEx("channel_sizes")
> ### * channel_sizes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: channel_sizes
> ### Title: Compute sizes of channels
> ### Aliases: channel_sizes
> 
> ### ** Examples
> 
> data(email_data)
> mod = makeLatentModel(email_data$edgeList, 10, 
+                       metadata = email_data$meta)
> mod$fit(fast_em = TRUE)
$err
[1] 9.989864e-05

$its
[1] 325

> 
> channel_sizes(mod, "exp_connects") 
 Channel 1  Channel 2  Channel 3  Channel 4  Channel 5  Channel 6  Channel 7 
  51.19784   47.17969   74.42168   48.00078   38.25325   44.83734   46.17637 
 Channel 8  Channel 9 Channel 10 
  58.00535   55.29227   34.99608 
> 
> 
> 
> cleanEx()
> nameEx("latChanNet-package")
> ### * latChanNet-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latChanNet-package
> ### Title: Latent Network Models for edge and metadata prediction.
> ### Aliases: latChanNet-package latChanNet
> ### Keywords: network
> 
> ### ** Examples
> 
>   ## Not run: 
> ##D      ## Optional simple examples of the most important functions
> ##D      ## These can be in \dontrun{} and \donttest{} blocks.   
> ##D   
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("makeLatentModel")
> ### * makeLatentModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeLatentModel
> ### Title: Make Latent Structure model
> ### Aliases: makeLatentModel
> 
> ### ** Examples
> 
> data(email_data)
> # Building model with metadata
> model = makeLatentModel(email_data$edgeList, 
+                         10, 
+                         metadata = email_data$meta)
> # Fitting model
> model$fit()
$err
[1] 9.98748e-05

$its
[1] 2962

> 
> # Predicting two edge probabilities
> predict(model, i = c(2,3), j = c(4,5))
 Edge 2:4  Edge 3:5 
0.0000000 0.6023617 
> 
> 
> 
> 
> cleanEx()
> nameEx("predict.LatClass")
> ### * predict.LatClass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.LatClass
> ### Title: Predictions from LatClass objects
> ### Aliases: predict.LatClass
> 
> ### ** Examples
> 
> data(email_data)
> 
> # Building model and fitting
> mod = makeLatentModel(email_data$edgeList, 
+                       nChans = 10, 
+                       metadata = email_data$meta)
> mod$fit(fast_em = TRUE)
$err
[1] 9.989864e-05

$its
[1] 325

> 
> # Predicting edge pairs
> predict(mod, i = 1:3, j = 4:2)
  Edge 1:4   Edge 2:3   Edge 3:2 
0.02574049 0.00000000 0.00000000 
> 
> # Predicting all combinations of i and j
> predict(mod, i = 1:3, j = 1:3, type = "cross")
           Node 1    Node 2     Node 3
Node 1 0.23006693 0.2588793 0.03260344
Node 2 0.25887929 0.3112189 0.00000000
Node 3 0.03260344 0.0000000 0.61233615
> 
> # Predicting metadata 
> # Subsetting for brevity
> predict(mod, i = 1:3, "dpt")[,1:5]
             dpt1      dpt2 dpt3       dpt4        dpt5
Node 1 0.02434453 0.2867997    0 0.08312848 0.007731609
Node 2 0.04646244 0.3205362    0 0.10037401 0.071395780
Node 3 0.00000000 0.0000000    0 0.00000000 0.000000000
> 
> 
> 
> cleanEx()
> nameEx("predicts_meta")
> ### * predicts_meta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predicts_meta
> ### Title: Subsets channels that are predictive of metadata
> ### Aliases: predicts_meta
> 
> ### ** Examples
> 
> data(email_data)
> mod = makeLatentModel(email_data$edgeList, 20,
+                       meta = email_data$meta)
> mod$fit(fast_em = TRUE)
$err
[1] 9.940063e-05

$its
[1] 1003

> 
> # Returns channels that are predictive 
> # of dpt == 1 or 2
> predicts_meta(mod, metanames = c("dpt1", "dpt2") ) 
$channels
[1]  4 12

$pars
     Channel 4 Channel 12
dpt1 0.6823532  0.0000000
dpt2 0.0000000  0.8006676

> # Returns channels that are predictive 
> # of *any* dpt
> predicts_meta(mod, metanames = NULL, metavars = "dpt")
$channels
 [1]  4  5  6  7  8 10 11 12 15 16 17 18 20

$pars
       Channel 4  Channel 5 Channel 6 Channel 7 Channel 8 Channel 10 Channel 11
dpt1  0.68235320 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt2  0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt3  0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt4  0.04322287 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt5  0.00000000 0.00000000 0.0000000 0.9098313 0.0000000  0.0000000  0.0000000
dpt6  0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt7  0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt8  0.00000000 0.83726025 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt9  0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt10 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt11 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt12 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt13 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt14 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt15 0.00000000 0.00000000 0.9409296 0.0000000 0.0000000  0.0000000  0.0000000
dpt16 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.7106788
dpt17 0.00000000 0.00000000 0.0000000 0.0000000 0.6905460  0.0000000  0.0000000
dpt18 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.8012583  0.0000000
dpt19 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt20 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt21 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt22 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt23 0.00000000 0.00000000 0.0000000 0.0000000 0.1567779  0.0000000  0.0000000
dpt24 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt25 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.1483769  0.0000000
dpt26 0.00000000 0.00000000 0.0000000 0.0000000 0.2069804  0.0000000  0.0000000
dpt27 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt28 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt29 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt30 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.1134024
dpt31 0.00000000 0.00000000 0.0825169 0.0000000 0.0000000  0.0000000  0.0000000
dpt32 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt33 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt34 0.00000000 0.02733603 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt35 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt36 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt37 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt38 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt39 0.00000000 0.00000000 0.0000000 0.0000000 0.1180423  0.0000000  0.0000000
dpt40 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt41 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
dpt42 0.00000000 0.00000000 0.0000000 0.0000000 0.0000000  0.0000000  0.0000000
      Channel 12 Channel 15 Channel 16 Channel 17 Channel 18 Channel 20
dpt1  0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt2  0.80066765  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt3  0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt4  0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt5  0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt6  0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt7  0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt8  0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt9  0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt10 0.00000000  0.0000000  0.5828397 0.00000000 0.00000000  0.0000000
dpt11 0.00000000  0.7489206  0.0000000 0.06974764 0.00000000  0.0000000
dpt12 0.00000000  0.0000000  0.0000000 0.00000000 0.58122258  0.0000000
dpt13 0.00000000  0.0000000  0.0000000 0.08697830 0.00000000  0.0000000
dpt14 0.00000000  0.0000000  0.0000000 0.58111679 0.00000000  0.0000000
dpt15 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt16 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt17 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt18 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt19 0.00000000  0.0000000  0.0000000 0.00000000 0.02654971  0.0000000
dpt20 0.00000000  0.0000000  0.6253116 0.00000000 0.00000000  0.0000000
dpt21 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt22 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.7231277
dpt23 0.00000000  0.0000000  0.0000000 0.07199839 0.00000000  0.2093157
dpt24 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt25 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt26 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt27 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt28 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt29 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt30 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt31 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt32 0.08534733  0.0000000  0.0000000 0.05995740 0.00000000  0.0000000
dpt33 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.1750834
dpt34 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt35 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt36 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt37 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt38 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt39 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt40 0.07653414  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt41 0.00000000  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000
dpt42 0.05093658  0.0000000  0.0000000 0.00000000 0.00000000  0.0000000

> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  13.509 0.483 5.357 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
